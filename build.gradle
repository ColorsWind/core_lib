import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
    id 'java'
    id "idea"
    id "eclipse"
    id "maven-publish"
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

apply plugin: 'maven-publish'

group = 'io.github.divios'
def pluginVersion = '2.0'
version = pluginVersion

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'codemc-snapshots'
        url = 'https://repo.codemc.io/repository/maven-snapshots/'
    }

    maven { url 'https://jitpack.io' }

    maven { url 'https://repo.codemc.org/repository/maven-public/' }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url repsyUrl
            credentials {
                username repsyUsername
                password repsyPassword
            }
        }
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:20.1.0'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    compileOnly group: "org.spigotmc", name: "spigot-api", version: "1.17-R0.1-SNAPSHOT"
    compileOnly  "de.tr7zw:item-nbt-api-plugin:2.8.0"
    compileOnly  "com.github.cryptomorin:XSeries:8.1.0"
}

shadowJar {

}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "myapp" // Default value is "shadow"

}

task updateJars {
    doLast {
        copy {
            from 'build/libs/core_lib-' + pluginVersion + "-all.jar"
            into 'C:/Users/serbe/Desktop/server_pruebas2/plugins'
            rename ("core_lib-" + pluginVersion + "-all.jar" , "core_lib-" + pluginVersion + ".jar")
        }
    }
}
task deploy(dependsOn: ["build", "updateJars"]) {
    updateJars.mustRunAfter jar
}

compileJava.dependsOn clean
build.dependsOn shadowJar
tasks.shadowJar.dependsOn tasks.relocateShadowJar
